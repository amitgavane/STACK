#include <iostream>

using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class Stack {
    Node* top;

public:
    Stack() { top = nullptr; }
    bool isEmpty() { return top == nullptr; }
    void push(int x);
    int pop();
    void print();
};

void Stack::push(int x) {
    Node* temp = new Node();
    if (!temp) {
        cout << "Heap Overflow\n";
        return;
    }
    temp->data = x;
    temp->next = top;
    top = temp;
    cout << x << " pushed into stack\n";
}

int Stack::pop() {
    if (isEmpty()) {
        cout << "Stack Underflow\n";
        return -1;
    }
    Node* temp = top;
    top = top->next;
    int popped = temp->data;
    delete temp;
    return popped;
}

void Stack::print() {
    if (isEmpty()) {
        cout << "Stack is empty\n";
        return;
    }
    Node* temp = top;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Stack s;
    int choice, value;
    while (true) {
        cout << "1. Push\n2. Pop\n3. Print\n4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
        case 1:
            cout << "Enter value to push: ";
            cin >> value;
            s.push(value);
            break;
        case 2:
            value = s.pop();
            if (value != -1)
                cout << value << " popped from stack\n";
            break;
        case 3:
            s.print();
            break;
        case 4:
            cout << "Exiting...\n";
            exit(0);
        default:
            cout << "Invalid choice, try again\n";
        }
    }
    return 0;
}
